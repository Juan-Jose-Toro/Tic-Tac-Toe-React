{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","this","squares","coordsOfWin","winner","lines","length","a","b","c","findWinningPosition","board","j","row","squareCoords","push","renderSquare","includes","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","reverse","draw","slice","calculateWinner","setState","concat","step","status","current","moves","map","move","arr","coords","desc","previous","y","x","compBoardStates","jumpTo","handleClick","reverseSteps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.792afa46.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className={\"square h-1/3 border -mr-px -mt-px border-blue-300 rounded-lg text-2xl text-center\" + (props.highlight ? \" text-blue-300\" : \"\")} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i, highlight = false) {\n    return (\n      <Square\n        highlight={highlight}\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    // 5. When someone wins, highlight the three squares that caused the win\n    let coordsOfWin;\n    if (this.props.winner) {\n      coordsOfWin = findWinningPosition(this.props.squares);\n    }\n    \n    // 3. Rewrite Board to use two loops to make the squares\n    let board = [];\n    for (let j = 0; j < 3; j++) {\n      let row = [];\n      for (let i = 0; i < 3; i++) {\n        const squareCoords = 3 * j + i;\n        row.push(\n          this.renderSquare(squareCoords, coordsOfWin && coordsOfWin.includes(squareCoords))\n        );\n      }\n      board.push(<div className=\"board-row flex-1 flex flex-col h-32\" key={j}>{row}</div>);\n    }\n\n\n    return (\n      <div className=\"flex w-full h-full\">\n        {board}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      reverse: false,\n      draw: false,\n    }\n  }\n\n  // Updates the state of class containing squares and xIsNext\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    \n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      reverse: this.state.reverse,\n\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  reverseSteps() {\n    this.setState({\n      reverse: !this.state.reverse,\n    });\n  }\n\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    let moves = history.map((step, move, arr) => {\n      let coords;\n      let desc;\n      if (move) {\n        coords = compBoardStates(arr[move].squares, arr[move - 1].squares);\n        // 1. Display the location for each move\n        desc = 'Go to move #' + move + ' (' + coords[0] + ',' + coords[1] + ')';\n      } else {\n        desc = 'Go to game start';\n      }\n\n      return (\n        <li key={move}>\n          {/* 2. Bold, in this case underline, the currently selected item */}\n          <button className={move === this.state.stepNumber ? \"underline\" : \"\"} onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n    \n    // 6. When no one wins, display a message about the result being a draw\n    let draw = false;\n    if (!winner && this.state.stepNumber >= 9) {\n      draw = true;\n    }\n\n    // 4. Add a toggle button that lets you sort the moves in either ascending or descending order\n    if (this.state.reverse) {\n      moves = moves.reverse();\n    }\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game flex flex-row p-6 max-w-md mx-auto min-h-screen items-center\">\n        {/* Board */}\n        <div className=\"h-32 mr-8\">\n          <div className=\"game-board flex flex-col h-full w-32\">\n            <Board\n              winner={winner ? true : false}\n              squares={current.squares}\n              onClick={(i) => this.handleClick(i)}\n            />\n          </div>\n          {draw && <p className=\"text-center pt-2 text-blue-300\">Draw</p>}\n        </div>\n        {/* Steps/Moves section */}\n        <div className=\"game-info flex-1\">\n          <div className=\"flex justify-between pb-3 items-center h-12\">\n            <div className=\"\">{status}</div>\n            <button \n              className={\"bg-blue-300 rounded-md px-2 py-1\" + (this.state.reverse ?'text-blue-300' : 'text-red-500')} \n              onClick={() => {this.reverseSteps()}}>Reverse</button>\n          </div>\n          <ol className=\"bg-yellow-300 rounded-lg px-3 py-1\">{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction findWinningPosition(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return lines[i];\n    }\n  }\n  return null;\n}\n\n// Takes two arrays of numbers and returns the 2D coordinates of the\n// first tile that is different.\nfunction compBoardStates(current, previous) {\n  for (let y = 1; y <= 3; y++) {\n    for (let x = 1; x <= 3; x++) {\n      let i = 3 * (y - 1) + x - 1;\n      if (current[i] !== previous[i]) {\n        return [x, y];\n      }\n    }\n  }\n  // Should never be reached\n  return [100,100];\n}"],"sourceRoot":""}